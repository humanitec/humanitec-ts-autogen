/* tslint:disable */
/* eslint-disable */
/**
 * Humanitec API
 * # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication  Almost all requests made to the Humanitec API require Authentication. See our [Developer Docs on API Authentication](https://developer.humanitec.com/platform-orchestrator/reference/api-references/#authentication) for instructions.  ## Content Types The Humanitec API, unless explicitly specified, only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning**                         | |----------|-------------------------------------| | `200`    | Success                             | | `201`    | Success, a new resource was created | | `204`    | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` range should be regarded as an error that can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning**                                                                                                           | |----------|-----------------------------------------------------------------------------------------------------------------------| | `400`    | General error. (Body will contain details)                                                                            | | `401`    | Attempt to access protected resource without `Authorization` Header.                                                  | | `403`    | The `Bearer` or `JWT` does not grant access to the requested resource.                                                | | `404`    | Resource not found.                                                                                                   | | `405`    | Method not allowed                                                                                                    | | `409`    | Conflict. Usually indicated a resource with that ID already exists.                                                   | | `422`    | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429`    | Too many requests - request rate limit has been reached.                                                              | | `500`    | Internal Error. If it occurs repeatedly, contact support.                                                             | 
 *
 * The version of the OpenAPI document: 0.28.8
 * Contact: support@humanitec.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { DeltaMetadataRequest } from './DeltaMetadataRequest.js';
import {
    DeltaMetadataRequestFromJSON,
    DeltaMetadataRequestFromJSONTyped,
    DeltaMetadataRequestToJSON,
} from './DeltaMetadataRequest.js';
import type { ModuleDeltasRequest } from './ModuleDeltasRequest.js';
import {
    ModuleDeltasRequestFromJSON,
    ModuleDeltasRequestFromJSONTyped,
    ModuleDeltasRequestToJSON,
} from './ModuleDeltasRequest.js';
import type { UpdateActionRequest } from './UpdateActionRequest.js';
import {
    UpdateActionRequestFromJSON,
    UpdateActionRequestFromJSONTyped,
    UpdateActionRequestToJSON,
} from './UpdateActionRequest.js';

/**
 * A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.
 * 
 * Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.
 * 
 * **Basic Structure**
 * 
 * ```
 *  {
 *    "id": <ID of the Deployment Delta.>,
 *    "metadata": {
 *      <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
 *    }
 *    "modules" : {
 *      "add" : {
 *        <ID of Module to add to the Deployment Set> : {
 *          <An entire Modules object>
 *        }
 *      },
 *      "remove": [
 *        <An array of Module IDs that should be removed from the Deployment Set>
 *      ],
 *     "update": {
 *        <ID of Module already in the Set to be updated> : [
 *          <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
 *        ]
 *      }
 *    }
 *  }
 * ```
 * @export
 * @interface DeltaRequest
 */
export interface DeltaRequest {
    /**
     * Ignored, but can be provided.
     * @type {string}
     * @memberof DeltaRequest
     */
    id?: string;
    /**
     * 
     * @type {DeltaMetadataRequest}
     * @memberof DeltaRequest
     */
    metadata?: DeltaMetadataRequest;
    /**
     * 
     * @type {ModuleDeltasRequest}
     * @memberof DeltaRequest
     */
    modules?: ModuleDeltasRequest;
    /**
     * 
     * @type {Array<UpdateActionRequest>}
     * @memberof DeltaRequest
     */
    shared?: Array<UpdateActionRequest>;
}

/**
 * Check if a given object implements the DeltaRequest interface.
 */
export function instanceOfDeltaRequest(value: object): boolean {
    return true;
}

export function DeltaRequestFromJSON(json: any): DeltaRequest {
    return DeltaRequestFromJSONTyped(json, false);
}

export function DeltaRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeltaRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'metadata': json['metadata'] == null ? undefined : DeltaMetadataRequestFromJSON(json['metadata']),
        'modules': json['modules'] == null ? undefined : ModuleDeltasRequestFromJSON(json['modules']),
        'shared': json['shared'] == null ? undefined : ((json['shared'] as Array<any>).map(UpdateActionRequestFromJSON)),
    };
}

export function DeltaRequestToJSON(value?: DeltaRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'metadata': DeltaMetadataRequestToJSON(value['metadata']),
        'modules': ModuleDeltasRequestToJSON(value['modules']),
        'shared': value['shared'] == null ? undefined : ((value['shared'] as Array<any>).map(UpdateActionRequestToJSON)),
    };
}

