/* tslint:disable */
/* eslint-disable */
/**
 * Humanitec API
 * # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication  Almost all requests made to the Humanitec API require Authentication. See our [Developer Docs on API Authentication](https://developer.humanitec.com/platform-orchestrator/reference/api-references/#authentication) for instructions.  ## Content Types The Humanitec API, unless explicitly specified, only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning**                         | |----------|-------------------------------------| | `200`    | Success                             | | `201`    | Success, a new resource was created | | `204`    | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` range should be regarded as an error that can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning**                                                                                                           | |----------|-----------------------------------------------------------------------------------------------------------------------| | `400`    | General error. (Body will contain details)                                                                            | | `401`    | Attempt to access protected resource without `Authorization` Header.                                                  | | `403`    | The `Bearer` or `JWT` does not grant access to the requested resource.                                                | | `404`    | Resource not found.                                                                                                   | | `405`    | Method not allowed                                                                                                    | | `409`    | Conflict. Usually indicated a resource with that ID already exists.                                                   | | `422`    | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429`    | Too many requests - request rate limit has been reached.                                                              | | `500`    | Internal Error. If it occurs repeatedly, contact support.                                                             | 
 *
 * The version of the OpenAPI document: 0.26.27
 * Contact: support@humanitec.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { NodeBodyResponse } from './NodeBodyResponse.js';
import {
    NodeBodyResponseFromJSON,
    NodeBodyResponseFromJSONTyped,
    NodeBodyResponseToJSON,
} from './NodeBodyResponse.js';

/**
 * The Dependency Graph which holds the list of objects which contain information to provision resources, sorted according to resources provisioning order.
 * @export
 * @interface DependencyGraphResponse
 */
export interface DependencyGraphResponse {
    /**
     * The ID of the Dependency Graph.
     * @type {string}
     * @memberof DependencyGraphResponse
     */
    id: string;
    /**
     * The sha256 hash of the graph list of nodes. Two graphs with same hash cannot exist, unless they are exactly the same graph, so they contain the same sorted list of nodes.
     * @type {string}
     * @memberof DependencyGraphResponse
     */
    hash: string;
    /**
     * A list of objects which hold information to provision resources, sorted according to resources provisioning order.
     * @type {Array<NodeBodyResponse>}
     * @memberof DependencyGraphResponse
     */
    nodes: Array<NodeBodyResponse>;
    /**
     * The timestamp of when the graph was generated for.
     * @type {Date}
     * @memberof DependencyGraphResponse
     */
    created_at: Date;
    /**
     * The timestamp of when the graph was generated for the last time.
     * @type {Date}
     * @memberof DependencyGraphResponse
     */
    used_at: Date;
}

/**
 * Check if a given object implements the DependencyGraphResponse interface.
 */
export function instanceOfDependencyGraphResponse(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('hash' in value)) return false;
    if (!('nodes' in value)) return false;
    if (!('created_at' in value)) return false;
    if (!('used_at' in value)) return false;
    return true;
}

export function DependencyGraphResponseFromJSON(json: any): DependencyGraphResponse {
    return DependencyGraphResponseFromJSONTyped(json, false);
}

export function DependencyGraphResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DependencyGraphResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'hash': json['hash'],
        'nodes': ((json['nodes'] as Array<any>).map(NodeBodyResponseFromJSON)),
        'created_at': (new Date(json['created_at'])),
        'used_at': (new Date(json['used_at'])),
    };
}

export function DependencyGraphResponseToJSON(value?: DependencyGraphResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'hash': value['hash'],
        'nodes': ((value['nodes'] as Array<any>).map(NodeBodyResponseToJSON)),
        'created_at': ((value['created_at']).toISOString()),
        'used_at': ((value['used_at']).toISOString()),
    };
}

