/* tslint:disable */
/* eslint-disable */
/**
 * Humanitec API
 * # Introduction The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows. The API is a REST based API. It is based around a set of concepts:  * Core * External Resources * Sets and Deltas  ## Authentication  Almost all requests made to the Humanitec API require Authentication. See our [Developer Docs on API Authentication](https://developer.humanitec.com/platform-orchestrator/reference/api-references/#authentication) for instructions.  ## Content Types The Humanitec API, unless explicitly specified, only accepts content types of `application/json` and will always return valid `application/json` or an empty response.  ## Response Codes ### Success Any response code in the `2xx` range should be regarded as success.  | **Code** | **Meaning**                         | |----------|-------------------------------------| | `200`    | Success                             | | `201`    | Success, a new resource was created | | `204`    | Success, but no content in response |  _Note: We plan to simplify the interface by replacing 201 with 200 status codes._  ### Failure Any response code in the `4xx` range should be regarded as an error that can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.  | **Code** | **Meaning**                                                                                                           | |----------|-----------------------------------------------------------------------------------------------------------------------| | `400`    | General error. (Body will contain details)                                                                            | | `401`    | Attempt to access protected resource without `Authorization` Header.                                                  | | `403`    | The `Bearer` or `JWT` does not grant access to the requested resource.                                                | | `404`    | Resource not found.                                                                                                   | | `405`    | Method not allowed                                                                                                    | | `409`    | Conflict. Usually indicated a resource with that ID already exists.                                                   | | `422`    | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. | | `429`    | Too many requests - request rate limit has been reached.                                                              | | `500`    | Internal Error. If it occurs repeatedly, contact support.                                                             | 
 *
 * The version of the OpenAPI document: 0.27.3
 * Contact: support@humanitec.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.
 * 
 * Matching criteria are made up in order of specificity with least specific first:
 * 
 * - Environment Type (`env_type`)
 * 
 * - Application (`app_id`)
 * 
 * - Environment (`env_id`)
 * 
 * - Resource (`res_id`)
 * 
 * When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.
 * 
 * **NOTE:**
 * 
 * Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
 * @export
 * @interface MatchingCriteriaResponse
 */
export interface MatchingCriteriaResponse {
    /**
     * (Optional) The ID of the Application that the Resources should belong to.
     * @type {string}
     * @memberof MatchingCriteriaResponse
     */
    app_id?: string;
    /**
     * (Optional) The class of the Resource in the Deployment Set. Can not be empty, if is not defined, set to `default`.
     * @type {string}
     * @memberof MatchingCriteriaResponse
     */
    _class: string;
    /**
     * (Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.
     * @type {string}
     * @memberof MatchingCriteriaResponse
     */
    env_id?: string;
    /**
     * (Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.
     * @type {string}
     * @memberof MatchingCriteriaResponse
     */
    env_type?: string;
    /**
     * Matching Criteria ID
     * @type {string}
     * @memberof MatchingCriteriaResponse
     */
    id: string;
    /**
     * (Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.
     * @type {string}
     * @memberof MatchingCriteriaResponse
     */
    res_id?: string;
}

/**
 * Check if a given object implements the MatchingCriteriaResponse interface.
 */
export function instanceOfMatchingCriteriaResponse(value: object): boolean {
    if (!('_class' in value)) return false;
    if (!('id' in value)) return false;
    return true;
}

export function MatchingCriteriaResponseFromJSON(json: any): MatchingCriteriaResponse {
    return MatchingCriteriaResponseFromJSONTyped(json, false);
}

export function MatchingCriteriaResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MatchingCriteriaResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'app_id': json['app_id'] == null ? undefined : json['app_id'],
        '_class': json['class'],
        'env_id': json['env_id'] == null ? undefined : json['env_id'],
        'env_type': json['env_type'] == null ? undefined : json['env_type'],
        'id': json['id'],
        'res_id': json['res_id'] == null ? undefined : json['res_id'],
    };
}

export function MatchingCriteriaResponseToJSON(value?: MatchingCriteriaResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'app_id': value['app_id'],
        'class': value['_class'],
        'env_id': value['env_id'],
        'env_type': value['env_type'],
        'id': value['id'],
        'res_id': value['res_id'],
    };
}

